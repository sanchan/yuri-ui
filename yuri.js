// Generated by CoffeeScript 1.7.1
(function() {
  if (!window.Yuri) {
    window.Yuri = {
      widget: {}
    };
  }

  Yuri.ui = function(options) {
    switch (options.view) {
      case "dropdown":
        return (new Yuri.widget["dropdown"]).initialize(options);
      case "progress-bar":
        return (new Yuri.widget["progress-bar"]).initialize(options);
      case "button":
        return (new Yuri.widget["button"]).initialize(options);
      case "button-group":
        return (new Yuri.widget["button-group"]).initialize(options);
      case "button-toolbar":
        return (new Yuri.widget["button-toolbar"]).initialize(options);
      case "nav":
        return (new Yuri.widget["nav"]).initialize(options);
      case "input-group":
        return (new Yuri.widget["input-group"]).initialize(options);
    }
  };

  Yuri.widget["progress-bar"] = function() {
    return {
      template: "<div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"><span class=\"sr-only\"></span></div>",
      options: {
        animate: true,
        animationDuration: 200,
        value: 0,
        type: null,
        active: false,
        striped: false,
        withLabel: false,
        label: function(value) {
          return value + "%";
        }
      },
      initialize: function(options) {
        this.$el = $(options.el);
        $.extend(this.options, options);
        return this.render();
      },
      value: function(value) {
        if (value) {
          this.options.value = value;
          if (typeof value === "number") {
            this.$el.find(".progress-bar").css("width", this.options.value + "%").attr("aria-valuenow", this.options.value);
            if (this.options.withLabel) {
              this.$el.find(".progress-bar").text(this.options.label(this.options.value));
            } else {
              this.$el.find(".sr-only").text(this.options.label(this.options.value));
            }
          } else {
            $(this.options.value).each((function(_this) {
              return function(idx, val) {};
            })(this));
          }
        }
        $("body").trigger("Yuri:ProgressBar:Value:Changed", [
          {
            widget: this,
            value: value
          }
        ]);
        return this.options.value;
      },
      configureBar: function($progressBar, options) {
        if (options.animate) {
          $progressBar.css("transition", "width " + options.animationDuration + " ease-in-out");
        } else {
          $progressBar.css("transition", "initial");
          this.options.animationDuration = 0;
        }
        if (options.type) {
          $progressBar.addClass("progress-bar-" + options.type);
        }
        if (options.active) {
          $progressBar.addClass("active");
        }
        if (options.striped) {
          $progressBar.addClass("progress-bar-striped");
        }
        if (options.withLabel) {
          $progressBar.find(".sr-only").remove();
          $progressBar.text(this.options.label(options.value));
        } else {
          $progressBar.find(".sr-only").text(this.options.label(options.value));
        }
        return setTimeout((function(_this) {
          return function() {
            return $progressBar.css("width", options.value + "%").attr("aria-valuenow", options.value);
          };
        })(this), 0);
      },
      render: function() {
        this.$el.addClass("progress");
        if (typeof this.options.value === "number") {
          this.$el.append(this.template);
          this.configureBar(this.$el.find(".progress-bar"), this.options);
        } else {
          $(this.options.value).each((function(_this) {
            return function(idx, val) {
              _this.$el.append(_this.template);
              return _this.configureBar(_this.$el.find(".progress-bar").last(), val);
            };
          })(this));
        }
        return this;
      }
    };
  };

  Yuri.widget["button"] = function() {
    return {
      template: "<span class=\"text\"></span>",
      templateIcon: "<span class=\"glyphicon\"></span>",
      templateCaret: "<span class=\"caret\"></span>",
      options: {
        id: null,
        text: "",
        type: "default",
        icon: null,
        iconPosition: "right",
        caret: false
      },
      initialize: function(options) {
        if (typeof options.el === "string") {
          this.$el = $(options.el);
        } else {
          this.$el = options.el;
        }
        $.extend(this.options, options);
        return this.render();
      },
      render: function() {
        this.$el.append(this.template);
        if (this.options.id) {
          this.$el.attr("id", this.options.id);
        }
        this.$el.addClass("btn").addClass("btn-" + this.options.type);
        if (this.options.text) {
          this.$el.find(".text").text(this.options.text + " ");
        } else {
          this.$el.find(".text").remove();
        }
        if (this.options.caret) {
          this.$el.append(this.templateCaret);
        }
        if (this.options.text === "") {
          this.$el.append($("<span class='sr-only'>Dropdown</span>"));
        }
        if (this.options.icon) {
          if (this.options.iconPosition === "right") {
            this.$el.append(this.templateIcon);
            this.$el.find(".text").append(" ");
          } else {
            this.$el.prepend(this.templateIcon);
            this.$el.find(".text").prepend(" ");
          }
          if (this.options.icon) {
            this.$el.find(".glyphicon").addClass("glyphicon-" + this.options.icon);
          }
        }
        this.$el.click((function(_this) {
          return function() {
            return $("body").trigger("Yuri:Button:Click", [
              {
                widget: _this
              }
            ]);
          };
        })(this));
        return this;
      }
    };
  };

  Yuri.widget["nav"] = function() {
    return {
      options: {
        type: "tabs",
        entries: []
      },
      initialize: function(options) {
        this.$el = $(options.el);
        $.extend(this.options, options);
        return this.render();
      },
      render: function() {
        this.$el.addClass("nav").addClass("nav-" + this.options.type);
        return $(this.options.entries).each((function(_this) {
          return function(idx, val) {
            var $item, $itemLink, self;
            self = _this;
            $itemLink = $("<a>");
            $itemLink.text(val.text);
            $item = $("<li>").attr("data-index", idx).append($itemLink).click(function() {
              $("body").trigger("Yuri:Nav:Selected", [
                {
                  widget: this,
                  index: idx
                }
              ]);
              self.$el.find(".active").removeClass("active");
              return $(this).addClass("active");
            });
            if (val.url) {
              $itemLink.attr("href", val.url);
            }
            _this.$el.append($item);
            if (val.active) {
              _this.$el.find(".active").removeClass("active");
              return _this.$el.find("li").last().addClass("active");
            }
          };
        })(this));
      }
    };
  };

  Yuri.widget["dropdown"] = function() {
    return {
      templateButton: "<button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"></button>\n<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"\"></ul>",
      templateAnchor: "<a class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"></a>\n<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"\"></ul>",
      templateButtonSplit: "<button class=\"btn\" type=\"button\"></button>\n<button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"></button>\n<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"\"></ul>",
      templateAnchorSplit: "<a class=\"btn\" type=\"button\"></a>\n<a class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"></a>\n<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"\"></ul>",
      templateMenuItem: "<li role=\"presentation\"><a role=\"menuitem\" tabindex=\"-1\" href=\"#\"></a></li>",
      templateDivider: "<li role=\"presentation\" class=\"divider\"></li>",
      templateMenuHeader: "<li role=\"presentation\" class=\"dropdown-header\"></li>",
      options: {
        text: "",
        id: null,
        type: "default",
        menuAlign: "left",
        menu: [],
        buttonTag: "button",
        split: false,
        grouped: false,
        size: null,
        dropup: false
      },
      initialize: function(options) {
        this.$el = $(options.el);
        $.extend(this.options, options);
        return this.render();
      },
      render: function() {
        if (this.options.buttonTag === "button") {
          if (this.options.split) {
            this.$el.append(this.templateButtonSplit);
          } else {
            this.$el.append(this.templateButton);
          }
        } else {
          if (this.options.split) {
            this.$el.append(this.templateAnchorSplit);
          } else {
            this.$el.append(this.templateAnchor);
          }
        }
        if (this.options.grouped || this.options.split) {
          this.$el.addClass("btn-group");
        } else {
          this.$el.addClass("dropdown");
        }
        if (this.options.size) {
          this.$el.find(".btn").addClass("btn-" + this.options.size);
        }
        if (this.options.dropup) {
          this.$el.addClass("dropup");
        }
        if (!this.options.id) {
          console.error("ERROR: 'id' option missing for 'dropdown' widget ");
        }
        this.$el.find(".btn").first().addClass("btn-" + this.options.type).attr("id", this.options.id);
        this.$el.find(".dropdown-menu").attr("aria-labelledby", this.options.id);
        if (this.options.split) {
          this.button = Yuri.ui({
            view: "button",
            el: "#" + this.options.id,
            type: this.options.type,
            text: this.options.text,
            caret: false
          });
          this.$el.find(".btn").last().addClass("btn-" + this.options.type).attr("id", this.options.id + "-caret");
          this.button = Yuri.ui({
            view: "button",
            el: "#" + this.options.id + "-caret",
            type: this.options.type,
            text: "",
            caret: true
          });
          $("#" + this.options.id + "-caret").height($("#" + this.options.id).height());
        } else {
          this.button = Yuri.ui({
            view: "button",
            el: "#" + this.options.id,
            type: this.options.type,
            text: this.options.text,
            caret: true
          });
        }
        if (this.options.menuAlign === "right") {
          this.$el.find(".dropdown-menu").addClass("dropdown-menu-right");
        }
        $(this.options.menu).each((function(_this) {
          return function(idx, val) {
            var $menuItem;
            if (val.type === "divider") {
              return _this.$el.find(".dropdown-menu").append(_this.templateDivider);
            } else if (val.type === "header") {
              _this.$el.find(".dropdown-menu").append(_this.templateMenuHeader);
              $menuItem = _this.$el.find(".dropdown-menu > li").last();
              return $menuItem.text(val.text);
            } else {
              _this.$el.find(".dropdown-menu").append(_this.templateMenuItem);
              $menuItem = _this.$el.find(".dropdown-menu > li").last();
              if (val.disabled) {
                $menuItem.addClass("disabled");
              }
              $menuItem.find("a").text(val.text);
              return $menuItem.click(function() {
                return $("body").trigger("Yuri:Dropdown:MenuItem:Click", [
                  {
                    widget: $menuItem,
                    index: idx,
                    itemOptions: val
                  }
                ]);
              });
            }
          };
        })(this));
        $("body").on("click", (function(_this) {
          return function() {
            return _this.$el.removeClass("open");
          };
        })(this));
        return this.$el.find(".btn").click((function(_this) {
          return function(ev) {
            if ($(ev.target).closest(".btn").hasClass("dropdown-toggle")) {
              _this.$el.toggleClass("open");
            }
            ev.stopPropagation();
            return $("body").trigger("Yuri:Dropdown:Click", [
              {
                widget: _this
              }
            ]);
          };
        })(this));
      }
    };
  };

  Yuri.widget["button-group"] = function() {
    return {
      options: {
        button: [],
        size: "default",
        vertical: false,
        justified: false
      },
      initialize: function(options) {
        this.$el = $(options.el);
        $.extend(this.options, options);
        return this.render();
      },
      render: function() {
        if (this.options.vertical) {
          this.$el.addClass("btn-group-vertical");
        } else {
          this.$el.addClass("btn-group");
          if (this.options.justified) {
            this.$el.addClass("btn-group-justified");
          }
        }
        if (this.options.size !== "default") {
          this.$el.addClass("btn-group-" + this.options.size);
        }
        $(this.options.buttons).each((function(_this) {
          return function(idx, button) {
            var buttonUI;
            if (button.view === "dropdown") {
              _this.$el.append("<div class='btn-group'></button>");
              _this.$el.find(".btn-group").last().attr("id", button.id + "-" + idx);
              if (_this.options.size !== "default") {
                _this.$el.find(".btn-group").last().addClass("btn-group-" + _this.options.size);
              }
              button.el = "#" + button.id + "-" + idx;
              if (_this.options.justified) {
                button.buttonTag = "anchor";
              }
              return buttonUI = Yuri.ui(button);
            } else {
              if (_this.options.justified) {
                _this.$el.append("<a></a>");
                _this.$el.find("a").last().attr("id", button.id);
              } else {
                _this.$el.append("<button></button>");
                _this.$el.find("button").last().attr("id", button.id);
              }
              button.view = "button";
              button.el = "#" + button.id;
              return buttonUI = Yuri.ui(button);
            }
          };
        })(this));
        return this;
      }
    };
  };

  Yuri.widget["button-toolbar"] = function() {
    return {
      options: {
        id: null,
        button: [],
        size: "default"
      },
      initialize: function(options) {
        this.$el = $(options.el);
        $.extend(this.options, options);
        return this.render();
      },
      render: function() {
        this.$el.addClass("btn-toolbar").attr("role", "toolbar");
        $(this.options.groups).each((function(_this) {
          return function(idx, group) {
            if (!group.id) {
              console.error("ERROR: 'id' option missing for each 'button-toolbar' entry ");
            }
            _this.$el.append("<div></div>");
            _this.$el.find("div").last().attr("id", group.id);
            group.view = "button-group";
            group.el = "#" + group.id;
            if (_this.options.size !== "default") {
              group.size = _this.options.size;
            }
            return Yuri.ui(group);
          };
        })(this));
        return this;
      }
    };
  };

  Yuri.widget["input-group"] = function() {
    return {
      templateAddon: "<span class=\"input-group-addon\"></span>",
      templateInput: "<input type=\"text\" class=\"form-control\">",
      templateButton: "<span class=\"input-group-btn\"></span>",
      options: {
        id: null,
        size: "default",
        items: []
      },
      initialize: function(options) {
        this.$el = $(options.el);
        $.extend(this.options, options);
        return this.render();
      },
      render: function() {
        this.$el.addClass("input-group");
        if (this.options.size !== "default") {
          this.$el.addClass("input-group-" + this.options.size);
        }
        $(this.options.items).each((function(_this) {
          return function(idx, item) {
            var $button, $buttonGroup, $input, button, itemOptions;
            if (item.type === "input" && !item.id) {
              console.error("ERROR: 'id' option missing for 'input-group' item");
            }
            itemOptions = {
              type: "text",
              text: "",
              placeholder: null
            };
            $.extend(itemOptions, item);
            if (itemOptions.view === "addon") {
              _this.$el.append(_this.templateAddon);
              if (itemOptions.type === "text") {
                return _this.$el.find(".input-group-addon").last().text(itemOptions.text);
              }
            } else if (itemOptions.view === "input") {
              _this.$el.append(_this.templateInput);
              $input = _this.$el.find(".form-control").last();
              if (itemOptions.type === "checkbox" || itemOptions.type === "radio") {
                _this.$el.append(_this.templateAddon);
                $input.appendTo(_this.$el.find(".input-group-addon").last());
                $input.attr("type", itemOptions.type);
                $input.removeClass("form-control");
              }
              $input.attr("id", itemOptions.id);
              if (itemOptions.placeholder) {
                return $input.attr("placeholder", itemOptions.placeholder);
              }
            } else if (itemOptions.view === "button") {
              $buttonGroup = $(_this.templateButton);
              _this.$el.append($buttonGroup);
              $button = $("<button></button>");
              $buttonGroup.append($button);
              $button.attr("id", itemOptions.id);
              return button = Yuri.ui({
                view: "button",
                text: itemOptions.text,
                el: "#" + itemOptions.id
              });
            } else if (itemOptions.view === "dropdown") {
              $buttonGroup = $("<div class='input-group-btn'></div>");
              _this.$el.append($buttonGroup);
              itemOptions.view = "dropdown";
              itemOptions.el = $buttonGroup;
              button = Yuri.ui({
                view: "dropdown",
                text: itemOptions.text,
                el: $buttonGroup,
                id: itemOptions.id,
                menu: itemOptions.menu,
                split: itemOptions.split,
                menuAlign: itemOptions.menuAlign
              });
              return $buttonGroup.removeClass("btn-group");
            }
          };
        })(this));
        return this;
      }
    };
  };

}).call(this);
